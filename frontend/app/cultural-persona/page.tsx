'use client';

import { useState } from 'react';
import { motion, AnimatePresence } from 'framer-motion';
import {
  Brain, Sparkles, User, Music, ShoppingBag, Utensils, MapPin, BookOpen,
  Download, Share2, FileText, Check, Twitter, Facebook, Linkedin,
  ArrowRight, Star, Award, Zap, Globe, Target, Users, TrendingUp,
  Heart, Palette, Coffee, Plane, Library, Camera, Gamepad2, Dumbbell,
  ArrowLeft
} from 'lucide-react';
import { useAuth } from '@/contexts/AuthContext';
import AuthGuard from '@/components/AuthGuard';
import { useRouter } from 'next/navigation';

// TypeScript interfaces for the cultural persona result
interface CulturalTrait {
  trait: string;
  description: string;
  confidence: number;
}

interface DomainInsight {
  domain: string;
  preferences: string[];
  insights: string[];
  cultural_significance: string;
}

interface CulturalPersonaResult {
  name: string;
  description: string;
  personality_traits: CulturalTrait[];
  domain_insights: DomainInsight[];
  cross_domain_patterns: string[];
  cultural_archetype: string;
  recommendations: string[];
}

const domains = [
  { id: 'music', label: 'Music', icon: Music, color: 'text-blue-500', gradient: 'from-blue-500 to-purple-600' },
  { id: 'fashion', label: 'Fashion', icon: ShoppingBag, color: 'text-purple-500', gradient: 'from-purple-500 to-pink-600' },
  { id: 'food', label: 'Food', icon: Utensils, color: 'text-orange-500', gradient: 'from-orange-500 to-red-600' },
  { id: 'travel', label: 'Travel', icon: MapPin, color: 'text-green-500', gradient: 'from-green-500 to-teal-600' },
  { id: 'books', label: 'Books', icon: BookOpen, color: 'text-indigo-500', gradient: 'from-indigo-500 to-purple-600' },
];

export default function CulturalPersona() {
  const { user } = useAuth();
  const router = useRouter();
  const [preferences, setPreferences] = useState({
    music: '',
    fashion: '',
    food: '',
    travel: '',
    books: ''
  });
  const [persona, setPersona] = useState<CulturalPersonaResult | null>(null);
  const [isLoading, setIsLoading] = useState(false);
  const [copied, setCopied] = useState(false);

  const handlePreferenceChange = (domain: string, value: string) => {
    setPreferences(prev => ({
      ...prev,
      [domain]: value
    }));
  };

  const generatePersona = async () => {
    setIsLoading(true);
    try {
      const response = await fetch('/api/cultural-persona', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({ preferences }),
      });

      if (response.ok) {
        const data: CulturalPersonaResult = await response.json();
        setPersona(data);
      } else {
        console.error('Failed to generate persona');
      }
    } catch (error) {
      console.error('Error generating persona:', error);
    } finally {
      setIsLoading(false);
    }
  };

  const savePersona = async () => {
    if (!user || !persona) return;

    try {
      // Convert preferences to arrays of strings to match the database schema
      const preferencesArray = {
        music: preferences.music ? [preferences.music] : [],
        fashion: preferences.fashion ? [preferences.fashion] : [],
        food: preferences.food ? [preferences.food] : [],
        travel: preferences.travel ? [preferences.travel] : [],
        books: preferences.books ? [preferences.books] : []
      };

      const personaData = {
        user_id: user.id,
        name: persona.name || 'My Cultural Persona',
        description: persona.description || 'Generated cultural persona based on preferences',
        preferences: preferencesArray,
        analysis_results: persona
      };

      const response = await fetch('/api/save-persona', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify(personaData),
      });

      if (response.ok) {
        alert('Cultural persona saved successfully!');
      } else {
        alert('Failed to save persona. Please try again.');
      }
    } catch (error) {
      console.error('Error saving persona:', error);
      alert('Failed to save persona. Please try again.');
    }
  };

  const exportPersona = () => {
    if (!persona) {
      alert('No persona to export. Please generate one first.');
      return;
    }

    const content = `CULTURAL PERSONA REPORT
Generated by CultureSense
${new Date().toLocaleDateString()}

PERSONA DETAILS:
Name: ${persona.name}
Type: ${persona.cultural_archetype}
Tagline: ${persona.recommendations[0]}

DESCRIPTION:
${persona.description}

CULTURAL INSIGHTS:
${persona.domain_insights?.map((insight: DomainInsight) => `• ${insight.cultural_significance}`).join('\n')}

CROSS-DOMAIN CONNECTIONS:
${persona.cross_domain_patterns?.map((connection: string) => `• ${connection}`).join('\n')}

BUSINESS IMPLICATIONS:
${persona.recommendations?.map((implication: string) => `• ${implication}`).join('\n')}

YOUR PREFERENCES:
Music: ${preferences.music}
Fashion: ${preferences.fashion}
Food: ${preferences.food}
Travel: ${preferences.travel}
Books: ${preferences.books}

Powered by Qloo's Cross-Domain Cultural Intelligence
`;

    const blob = new Blob([content], { type: 'text/plain' });
    const url = window.URL.createObjectURL(blob);
    const a = document.createElement('a');
    a.href = url;
    a.download = `cultural-persona-${new Date().toISOString().split('T')[0]}.txt`;
    document.body.appendChild(a);
    a.click();
    window.URL.revokeObjectURL(url);
    document.body.removeChild(a);
  };

  const sharePersona = async () => {
    if (!persona) {
      alert('No persona to share. Please generate one first.');
      return;
    }

    const shareText = `🎭 My Cultural Persona: ${persona.name}

${persona.recommendations[0]}

${persona.description}

🔍 Key Insights:
${persona.domain_insights?.slice(0, 2).map((insight: DomainInsight) => `• ${insight.cultural_significance}`).join('\n')}

Discover your cultural DNA at: ${window.location.origin}/cultural-persona

#CultureSense #CulturalIntelligence #QlooAPI`;

    if (navigator.share) {
      try {
        await navigator.share({
          title: 'My Cultural Persona',
          text: shareText,
          url: window.location.href
        });
      } catch (error) {
        console.error('Share failed:', error);
        copyToClipboard();
      }
    } else {
      copyToClipboard();
    }
  };

  const copyToClipboard = async () => {
    if (!persona) return;

    const shareText = `🎭 My Cultural Persona: ${persona.name}\n\n${persona.recommendations[0]}\n\n${persona.description}\n\nDiscover your cultural DNA at: ${window.location.origin}/cultural-persona\n\n#CultureSense #CulturalIntelligence #QlooAPI`;

    try {
      await navigator.clipboard.writeText(shareText);
      setCopied(true);
      setTimeout(() => setCopied(false), 2000);
    } catch (error) {
      console.error('Copy failed:', error);
      alert('Failed to copy to clipboard. Please try again.');
    }
  };

  const shareToSocial = (platform: string) => {
    if (!persona) return;

    const text = encodeURIComponent(`🎭 My Cultural Persona: ${persona.name}\n\n${persona.recommendations[0]}\n\nDiscover your cultural DNA with CultureSense!`);
    const url = encodeURIComponent(window.location.href);
    const hashtags = encodeURIComponent('CultureSense,CulturalIntelligence,QlooAPI');

    let shareUrl = '';
    switch (platform) {
      case 'twitter':
        shareUrl = `https://twitter.com/intent/tweet?text=${text}&url=${url}&hashtags=${hashtags}`;
        break;
      case 'facebook':
        shareUrl = `https://www.facebook.com/sharer/sharer.php?u=${url}&quote=${text}`;
        break;
      case 'linkedin':
        shareUrl = `https://www.linkedin.com/sharing/share-offsite/?url=${url}`;
        break;
    }

    if (shareUrl) {
      window.open(shareUrl, '_blank', 'width=600,height=400');
    }
  };

  return (
    <AuthGuard>
      <div className="min-h-screen bg-gradient-to-br from-slate-900 via-purple-900 to-slate-900">
        {/* Animated Background */}
        <div className="fixed inset-0 -z-10">
          <div className="absolute inset-0 opacity-20">
            <div className="absolute top-1/4 left-1/4 w-96 h-96 bg-blue-500/20 rounded-full blur-3xl animate-float"></div>
            <div className="absolute top-3/4 right-1/4 w-96 h-96 bg-purple-500/20 rounded-full blur-3xl animate-float" style={{ animationDelay: '1s' }}></div>
            <div className="absolute bottom-1/4 left-1/2 w-96 h-96 bg-pink-500/20 rounded-full blur-3xl animate-float" style={{ animationDelay: '2s' }}></div>
          </div>
        </div>

        <div className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-8">
          {/* Back Button */}
          <motion.button
            onClick={() => router.back()}
            className="flex items-center space-x-2 text-white/70 hover:text-white mb-6 transition-colors"
            initial={{ opacity: 0, x: -20 }}
            animate={{ opacity: 1, x: 0 }}
            transition={{ duration: 0.3 }}
          >
            <ArrowLeft className="h-5 w-5" />
            <span>Back</span>
          </motion.button>

          {/* Page Header */}
          <motion.div 
            className="text-center mb-12"
            initial={{ opacity: 0, y: 20 }}
            animate={{ opacity: 1, y: 0 }}
            transition={{ duration: 0.6 }}
          >
            <div className="flex items-center justify-center mb-6">
              <div className="w-16 h-16 rounded-full bg-gradient-to-r from-purple-500 to-pink-600 flex items-center justify-center mr-4">
                <Sparkles className="h-8 w-8 text-white" />
              </div>
              <h1 className="text-5xl font-bold text-white">
                Cultural Persona Builder
              </h1>
            </div>
            <p className="text-xl text-white/70 max-w-3xl mx-auto">
              Discover your unique cultural DNA profile using Qloo's cross-domain intelligence. 
              Build a comprehensive persona that reveals how your preferences connect across music, fashion, food, travel, and more.
            </p>
          </motion.div>

          {/* Input Section */}
          <motion.div
            className="card-hover mb-12"
            initial={{ opacity: 0, y: 20 }}
            animate={{ opacity: 1, y: 0 }}
            transition={{ duration: 0.6, delay: 0.1 }}
          >
            <div className="flex items-center justify-between mb-8">
              <div>
                <h2 className="text-3xl font-bold text-white mb-2">Your Cultural Preferences</h2>
                <p className="text-white/70">Tell us about your favorite things across different cultural domains</p>
              </div>
              <motion.button
                onClick={generatePersona}
                disabled={isLoading}
                className="btn-primary disabled:opacity-50 disabled:cursor-not-allowed flex items-center space-x-2"
                whileHover={{ scale: 1.05 }}
                whileTap={{ scale: 0.95 }}
              >
                {isLoading ? (
                  <>
                    <div className="animate-spin rounded-full h-4 w-4 border-b-2 border-white mr-2"></div>
                    <span>Generating Persona...</span>
                  </>
                ) : (
                  <>
                    <Sparkles className="h-4 w-4" />
                    <span>Generate My Persona</span>
                  </>
                )}
              </motion.button>
            </div>

            <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-8">
              {domains.map((domain) => (
                <motion.div 
                  key={domain.id} 
                  className="space-y-4"
                  whileHover={{ scale: 1.02 }}
                >
                  <div className="flex items-center space-x-3">
                    <div className={`w-12 h-12 rounded-xl bg-gradient-to-r ${domain.gradient} flex items-center justify-center`}>
                      <domain.icon className="h-6 w-6 text-white" />
                    </div>
                    <div>
                      <h3 className="text-lg font-semibold text-white">{domain.label}</h3>
                      <p className="text-white/60 text-sm">Your preferences</p>
                    </div>
                  </div>
                  <input
                    type="text"
                    value={preferences[domain.id as keyof typeof preferences]}
                    onChange={(e) => handlePreferenceChange(domain.id, e.target.value)}
                    placeholder={`e.g., indie folk, vintage fashion, plant-based cuisine...`}
                    className="input-field"
                  />
                </motion.div>
              ))}
            </div>
          </motion.div>

          {/* Persona Results */}
          <AnimatePresence mode="wait">
            {persona && (
              <motion.div
                key="persona"
                initial={{ opacity: 0, y: 20 }}
                animate={{ opacity: 1, y: 0 }}
                exit={{ opacity: 0, y: -20 }}
                transition={{ duration: 0.6 }}
                className="space-y-8"
              >
                {/* Persona Header */}
                <motion.div
                  className="card text-center"
                  whileHover={{ y: -5 }}
                >
                  <div className="flex items-center justify-center mb-6">
                    <div className="w-20 h-20 rounded-full bg-gradient-to-r from-purple-500 to-pink-600 flex items-center justify-center mr-6">
                      <User className="h-10 w-10 text-white" />
                    </div>
                    <div className="text-left">
                      <h2 className="text-4xl font-bold text-white mb-2">{persona.name}</h2>
                      <p className="text-xl text-purple-400 font-medium mb-1">{persona.cultural_archetype}</p>
                      <p className="text-white/70 text-lg">{persona.recommendations[0]}</p>
                    </div>
                  </div>
                  <p className="text-white/80 text-lg max-w-4xl mx-auto leading-relaxed">
                    {persona.description}
                  </p>
                </motion.div>

                {/* Action Buttons */}
                <motion.div
                  className="flex flex-wrap items-center justify-center gap-4"
                  initial={{ opacity: 0, y: 20 }}
                  animate={{ opacity: 1, y: 0 }}
                  transition={{ duration: 0.6, delay: 0.2 }}
                >
                  <motion.button
                    onClick={exportPersona}
                    className="btn-secondary flex items-center space-x-2"
                    whileHover={{ scale: 1.05 }}
                    whileTap={{ scale: 0.95 }}
                  >
                    <FileText className="h-4 w-4" />
                    <span>Export Persona</span>
                  </motion.button>

                  <motion.button
                    onClick={sharePersona}
                    className="btn-secondary flex items-center space-x-2"
                    whileHover={{ scale: 1.05 }}
                    whileTap={{ scale: 0.95 }}
                  >
                    {copied ? (
                      <>
                        <Check className="h-4 w-4" />
                        <span>Copied!</span>
                      </>
                    ) : (
                      <>
                        <Share2 className="h-4 w-4" />
                        <span>Share</span>
                      </>
                    )}
                  </motion.button>

                  {user && (
                    <motion.button
                      onClick={savePersona}
                      className="btn-success flex items-center space-x-2"
                      whileHover={{ scale: 1.05 }}
                      whileTap={{ scale: 0.95 }}
                    >
                      <Download className="h-4 w-4" />
                      <span>Save to Profile</span>
                    </motion.button>
                  )}
                </motion.div>

                {/* Social Share Buttons */}
                <motion.div
                  className="flex items-center justify-center space-x-4"
                  initial={{ opacity: 0, y: 20 }}
                  animate={{ opacity: 1, y: 0 }}
                  transition={{ duration: 0.6, delay: 0.3 }}
                >
                  <span className="text-white/60">Share on:</span>
                  <motion.button
                    onClick={() => shareToSocial('twitter')}
                    className="w-10 h-10 rounded-full bg-blue-500 flex items-center justify-center hover:bg-blue-600 transition-colors"
                    whileHover={{ scale: 1.1 }}
                    whileTap={{ scale: 0.9 }}
                  >
                    <Twitter className="h-5 w-5 text-white" />
                  </motion.button>
                  <motion.button
                    onClick={() => shareToSocial('facebook')}
                    className="w-10 h-10 rounded-full bg-blue-600 flex items-center justify-center hover:bg-blue-700 transition-colors"
                    whileHover={{ scale: 1.1 }}
                    whileTap={{ scale: 0.9 }}
                  >
                    <Facebook className="h-5 w-5 text-white" />
                  </motion.button>
                  <motion.button
                    onClick={() => shareToSocial('linkedin')}
                    className="w-10 h-10 rounded-full bg-blue-700 flex items-center justify-center hover:bg-blue-800 transition-colors"
                    whileHover={{ scale: 1.1 }}
                    whileTap={{ scale: 0.9 }}
                  >
                    <Linkedin className="h-5 w-5 text-white" />
                  </motion.button>
                </motion.div>

                {/* Cultural Insights */}
                <motion.div
                  className="grid grid-cols-1 lg:grid-cols-2 gap-8"
                  initial={{ opacity: 0, y: 20 }}
                  animate={{ opacity: 1, y: 0 }}
                  transition={{ duration: 0.6, delay: 0.4 }}
                >
                  {/* Cultural Insights */}
                  <motion.div
                    className="card-hover"
                    whileHover={{ y: -5 }}
                  >
                    <div className="flex items-center space-x-3 mb-6">
                      <div className="w-12 h-12 rounded-xl bg-gradient-to-r from-blue-500 to-purple-600 flex items-center justify-center">
                        <Brain className="h-6 w-6 text-white" />
                      </div>
                      <div>
                        <h3 className="text-xl font-bold text-white">Cultural Insights</h3>
                        <p className="text-white/60 text-sm">Deep cultural patterns</p>
                      </div>
                    </div>
                    <div className="space-y-4">
                      {persona.domain_insights?.map((insight: DomainInsight, index: number) => (
                        <motion.div
                          key={index}
                          className="glass rounded-lg p-4 border border-white/10"
                          initial={{ opacity: 0, x: -20 }}
                          animate={{ opacity: 1, x: 0 }}
                          transition={{ duration: 0.6, delay: 0.5 + index * 0.1 }}
                          whileHover={{ scale: 1.02 }}
                        >
                          <div className="flex items-start space-x-3">
                            <div className="w-2 h-2 bg-blue-400 rounded-full mt-2 flex-shrink-0"></div>
                            <p className="text-white/80">{insight.cultural_significance}</p>
                          </div>
                        </motion.div>
                      ))}
                    </div>
                  </motion.div>

                  {/* Cross-Domain Connections */}
                  <motion.div
                    className="card-hover"
                    whileHover={{ y: -5 }}
                  >
                    <div className="flex items-center space-x-3 mb-6">
                      <div className="w-12 h-12 rounded-xl bg-gradient-to-r from-purple-500 to-pink-600 flex items-center justify-center">
                        <ArrowRight className="h-6 w-6 text-white" />
                      </div>
                      <div>
                        <h3 className="text-xl font-bold text-white">Cross-Domain Connections</h3>
                        <p className="text-white/60 text-sm">Qloo's unique insights</p>
                      </div>
                    </div>
                    <div className="space-y-4">
                      {persona.cross_domain_patterns?.map((connection: string, index: number) => (
                        <motion.div
                          key={index}
                          className="glass rounded-lg p-4 border border-white/10"
                          initial={{ opacity: 0, x: 20 }}
                          animate={{ opacity: 1, x: 0 }}
                          transition={{ duration: 0.6, delay: 0.5 + index * 0.1 }}
                          whileHover={{ scale: 1.02 }}
                        >
                          <div className="flex items-start space-x-3">
                            <div className="w-2 h-2 bg-purple-400 rounded-full mt-2 flex-shrink-0"></div>
                            <p className="text-white/80">{connection}</p>
                          </div>
                        </motion.div>
                      ))}
                    </div>
                  </motion.div>
                </motion.div>

                {/* Business Implications */}
                <motion.div
                  className="card-hover"
                  initial={{ opacity: 0, y: 20 }}
                  animate={{ opacity: 1, y: 0 }}
                  transition={{ duration: 0.6, delay: 0.6 }}
                  whileHover={{ y: -5 }}
                >
                  <div className="flex items-center space-x-3 mb-6">
                    <div className="w-12 h-12 rounded-xl bg-gradient-to-r from-green-500 to-teal-600 flex items-center justify-center">
                      <Target className="h-6 w-6 text-white" />
                    </div>
                    <div>
                      <h3 className="text-xl font-bold text-white">Business Implications</h3>
                      <p className="text-white/60 text-sm">Strategic recommendations</p>
                    </div>
                  </div>
                  <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                    {persona.recommendations?.map((implication: string, index: number) => (
                      <motion.div
                        key={index}
                        className="glass rounded-lg p-4 border border-white/10"
                        initial={{ opacity: 0, y: 20 }}
                        animate={{ opacity: 1, y: 0 }}
                        transition={{ duration: 0.6, delay: 0.7 + index * 0.1 }}
                        whileHover={{ scale: 1.02 }}
                      >
                        <div className="flex items-start space-x-3">
                          <div className="w-2 h-2 bg-green-400 rounded-full mt-2 flex-shrink-0"></div>
                          <p className="text-white/80">{implication}</p>
                        </div>
                      </motion.div>
                    ))}
                  </div>
                </motion.div>

                {/* Qloo Integration Highlight */}
                <motion.div
                  className="card text-center"
                  initial={{ opacity: 0, y: 20 }}
                  animate={{ opacity: 1, y: 0 }}
                  transition={{ duration: 0.6, delay: 0.8 }}
                >
                  <div className="flex items-center justify-center mb-6">
                    <div className="w-16 h-16 rounded-full bg-gradient-to-r from-blue-500 to-purple-600 flex items-center justify-center mr-4">
                      <Brain className="h-8 w-8 text-white" />
                    </div>
                    <h3 className="text-3xl font-bold text-white">Powered by Qloo's Cross-Domain Intelligence</h3>
                  </div>
                  <p className="text-white/70 text-lg max-w-4xl mx-auto mb-8">
                    Your cultural persona is generated using Qloo's unique cultural affinity graph, 
                    revealing connections between your preferences that no other platform can discover. 
                    This is cultural intelligence without personal data — pure semantic understanding of your cultural DNA.
                  </p>
                  <div className="grid grid-cols-1 md:grid-cols-3 gap-8 max-w-4xl mx-auto">
                    {[
                      {
                        icon: Zap,
                        title: "Privacy-First",
                        description: "No personal data required"
                      },
                      {
                        icon: Globe,
                        title: "Cross-Domain",
                        description: "Connections across all cultural domains"
                      },
                      {
                        icon: Star,
                        title: "AI-Powered",
                        description: "Advanced cultural pattern recognition"
                      }
                    ].map((feature, index) => (
                      <motion.div 
                        key={index}
                        className="text-center"
                        whileHover={{ scale: 1.05 }}
                      >
                        <div className="w-12 h-12 bg-gradient-to-r from-blue-500 to-purple-600 rounded-full flex items-center justify-center mx-auto mb-3">
                          <feature.icon className="h-6 w-6 text-white" />
                        </div>
                        <h4 className="font-semibold text-white mb-1">{feature.title}</h4>
                        <p className="text-sm text-white/60">{feature.description}</p>
                      </motion.div>
                    ))}
                  </div>
                </motion.div>
              </motion.div>
            )}
          </AnimatePresence>
        </div>
      </div>
    </AuthGuard>
  );
} 